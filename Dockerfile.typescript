FROM node:20.11.1-alpine3.19 as builder

WORKDIR /app

# Copy package files
COPY package*.json ./
RUN npm install

# Copy TypeScript configuration and source files
COPY tsconfig.json ./
COPY src/ ./src/

# Build TypeScript code with error handling
RUN npm run build || (echo "TypeScript build failed, using fallback" && \
    npm run build:fallback)

# Production stage
FROM node:20.11.1-alpine3.19 as production

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install production dependencies only
RUN npm install --only=production

# Copy built files from builder stage
COPY --from=builder /app/dist ./dist

# Copy the bypass script (as fallback)
COPY deploy-bypass.js ./

# Copy environment variables
COPY .env* ./

# Copy scripts directory for fallback
COPY scripts/ ./scripts/

# Expose port
EXPOSE 8080

# Create a detection script to choose the right startup mode
RUN echo '#!/bin/sh\n\
if [ -s ./dist/server.js ] && [ -x "$(command -v node)" ]; then\n\
  echo "Starting with TypeScript build"\n\
  node dist/server.js\n\
else\n\
  echo "TypeScript build not found or invalid, using bypass script"\n\
  node deploy-bypass.js\n\
fi' > ./start.sh && chmod +x ./start.sh

# Command to start the application
CMD ["./start.sh"] 